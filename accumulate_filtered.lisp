; efficiency: (theta (log n))
(define (even? n) (= (remainder n 2) 0))
(define (expmod base exp m)
    ; lack of carmichael test :( 561
    (define (carmichael? n)
        (if (= n 1) n n))
    (cond ((= exp 0) 1)
          ((even? exp)
            ; (remainder (carmichael? (square (expmod base (/ exp 2) m)))
            ;             m))
            (carmichael? (remainder (square (expmod base (/ exp 2) m))
                                    m)))
          (else (remainder (* base (expmod base (- exp 1) m))
                            m))
          )
    )
(define (fermat-test n)
    (define (try-it a) (= (expmod a (- n 1) n) 1))
    (try-it (+ 1 (random (- n 1)))))
(define (fast-prime? n times)
    (cond ((= times 0) #t)
          ((fermat-test n) (fast-prime? n (- times 1)))
          (else #f)
        )
    )
(define (prime? n) (fast-prime? n 7))

(define (accumulate combine null-value filter? term a next b)
    (define (iter a result)
        (cond ((> a b) result)
              ((filter? a)
                (iter (next a) (combine (term a) result)))
              (else (iter (next a) result))
              )
        )
    (iter a null-value)
    )

(define (product-combination a b) (* a b))
(define (product term a next b)
    (accumulate product-combination 1 prime? term a next b)
    )

(define (truly? x) (= (remainder x 2) 0))
(define (identity x) x)
(define (inc x) (+ x 1))

(product identity 2 inc 11)